{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\aaqib.junaid\\\\OneDrive - Accenture\\\\Documents\\\\GitHub\\\\Quiz\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\aaqib.junaid\\\\OneDrive - Accenture\\\\Documents\\\\GitHub\\\\Quiz\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\aaqib.junaid\\\\OneDrive - Accenture\\\\Documents\\\\GitHub\\\\Quiz\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\aaqib.junaid\\\\OneDrive - Accenture\\\\Documents\\\\GitHub\\\\Quiz\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\aaqib.junaid\\\\OneDrive - Accenture\\\\Documents\\\\GitHub\\\\Quiz\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\aaqib.junaid\\\\OneDrive - Accenture\\\\Documents\\\\GitHub\\\\Quiz\\\\src\\\\features\\\\Quiz\\\\quizPage.js\";\nimport React, { Component } from \"react\"; //Imports Style Sheets and Quiz Data\n\nimport { Quiz } from \"./quizData.js\";\nimport \"./quizPage.css\";\n\nvar QuizPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(QuizPage, _Component);\n\n  function QuizPage(props) {\n    var _this;\n\n    _classCallCheck(this, QuizPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(QuizPage).call(this, props)); //Initalises the states that will be used\n\n    _this.state = {\n      page: \"Question\",\n      //page to be displayed\n      button: \"Next\",\n      //buttons text\n      buttonActive: \"\",\n      //which buttons selected\n      questionNum: 0,\n      //which question number you are currently on\n      questions: Quiz.data,\n      //data used for displaying the quiz\n      score: 0,\n      //users score\n      resultMessage: \"\" //end result message\n\n    };\n    return _this;\n  } //HTML Elements to be displayed for the Questions Page\n\n\n  _createClass(QuizPage, [{\n    key: \"questionPage\",\n    value: function questionPage() {\n      //calls the renderButtons function with the current\n      //question and answers list and returns on the\n      //HTML Elements\n      return this.renderButtons( //retrives the questions data from the state questions and points to\n      //the questionNumber in the array\n      this.state.questions[this.state.questionNum].question, this.state.questions[this.state.questionNum].answers);\n    } //HTML Elements to be displayed for the result page\n\n  }, {\n    key: \"resultPage\",\n    value: function resultPage() {\n      //returns the end results message\n      return React.createElement(\"h1\", {\n        id: \"results\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, this.state.resultMessage);\n    } //Changes the color of the auestion tab when a user\n    //clicks on it\n\n  }, {\n    key: \"updateTab\",\n    value: function updateTab(tab) {\n      this.setState({\n        buttonActive: tab\n      });\n    } //function handles button submissions\n\n  }, {\n    key: \"submit\",\n    value: function submit() {\n      //intialises variables\n      var newScore = this.state.score;\n      var questionNumber = this.state.questionNum;\n      var nextButton = this.state.button; //checks if button is clicked\n      //if the buttons not clicked user is\n      //prompted a message sating please select\n      //an answer\n\n      if (this.state.buttonActive == \"\" && (this.state.page == \"Question\" || this.state.page == \"Finish\")) {\n        alert(\"Please Select an Answer\");\n      } //if the button is clicked then a check is\n      //made to see if it was the next button\n      //that was clicked\n      //if that is the case a check is made to see\n      //if the users selected value is the correct one\n      //if so 1 is addedto the users score\n      else if (this.state.button == \"Next\") {\n          if (this.state.buttonActive == this.state.questions[this.state.questionNum].correctAnswer) {\n            newScore = this.state.score + 1;\n          } //if the user is on the last question\n          //the button is changed to finish\n\n\n          if (this.state.questionNum + 1 == this.state.questions.length - 1) {\n            nextButton = \"Finish\"; //question number is plus oned to get the\n            //next set of questions and answers\n\n            questionNumber++;\n          } else {\n            //question number is plus oned to get the\n            //next set of questions and answers\n            questionNumber++;\n          } //chnages the state values accordingly\n\n\n          this.setState({\n            score: newScore,\n            button: nextButton,\n            questionNum: questionNumber,\n            buttonActive: \"\"\n          }); //if the button clicked was finish\n          //a check is made to see if the users\n          //answer was correct and then\n          //sets the end message to tell\n          //the user their score\n        } else if (this.state.button == \"Finish\") {\n          if (this.state.buttonActive == this.state.questions[this.state.questionNum].correctAnswer) {\n            newScore = this.state.score + 1;\n          } //message created bassed of user score\n\n\n          var message = \"You Scored \" + newScore.toString() + \" out of \" + this.state.questions.length.toString(); //states updated accordingly\n\n          this.setState({\n            score: newScore,\n            page: \"Results\",\n            button: \"Retry\",\n            questionNum: 0,\n            buttonActive: \"\",\n            resultMessage: message\n          }); //else if none of the other buttons match\n          //this means the user wantes to resest the\n          //quiz and will revert back to the\n          //original state\n        } else {\n          this.setState({\n            score: 0,\n            button: \"Next\",\n            questionNum: 0,\n            page: \"Question\"\n          });\n        }\n    }\n  }, {\n    key: \"renderButtons\",\n    value: function renderButtons(question, answers) {\n      var _this2 = this;\n\n      var buttons = []; //a question button is generated\n      //dynamically based upon the amount of\n      //answers a question has\n\n      var _loop = function _loop(i) {\n        //pushs each question button into an array\n        buttons.push(React.createElement(\"button\", {\n          key: i,\n          className: \"questionButton\",\n          id: _this2.state.buttonActive === answers[i] ? \"navButtonActive\" : null,\n          onClick: function onClick() {\n            return _this2.updateTab(answers[i]);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145\n          },\n          __self: this\n        }, answers[i]));\n      };\n\n      for (var i = 0; i < answers.length; i++) {\n        _loop(i);\n      } //div is made which will contain the question\n      //and possible answers\n\n\n      var output = React.createElement(\"div\", {\n        className: \"questionBox\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"question\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, question), React.createElement(\"div\", {\n        id: \"buttons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, buttons));\n      return output;\n    } //render function will display all the HTML\n    //Elements based of the page the user is on\n    //The function calls will run the respected\n    //functions and return the HTML Elements and\n    //display it\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        id: \"mainPage\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"mainPageBody\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"contentPanel\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        id: \"quizTitle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, \"Quiz\"), this.state.page === \"Question\" ? this.questionPage() : this.state.page === \"Results\" ? this.resultPage() : this.state.page, this.state.button == \"Next\" ? React.createElement(\"button\", {\n        id: \"submit\",\n        onClick: function onClick() {\n          return _this3.submit();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, this.state.button) : this.state.button == \"Finish\" ? React.createElement(\"button\", {\n        id: \"submit\",\n        onClick: function onClick() {\n          return _this3.submit();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, this.state.button) : React.createElement(\"button\", {\n        id: \"submit\",\n        onClick: function onClick() {\n          return _this3.submit();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, this.state.button))));\n    }\n  }]);\n\n  return QuizPage;\n}(Component);\n\nexport default QuizPage;","map":{"version":3,"sources":["C:\\Users\\aaqib.junaid\\OneDrive - Accenture\\Documents\\GitHub\\Quiz\\src\\features\\Quiz\\quizPage.js"],"names":["React","Component","Quiz","QuizPage","props","state","page","button","buttonActive","questionNum","questions","data","score","resultMessage","renderButtons","question","answers","tab","setState","newScore","questionNumber","nextButton","alert","correctAnswer","length","message","toString","buttons","i","push","updateTab","output","questionPage","resultPage","submit"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\n//Imports Style Sheets and Quiz Data\r\nimport { Quiz } from \"./quizData.js\";\r\nimport \"./quizPage.css\";\r\n\r\nclass QuizPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    //Initalises the states that will be used\r\n    this.state = {\r\n      page: \"Question\", //page to be displayed\r\n      button: \"Next\", //buttons text\r\n      buttonActive: \"\", //which buttons selected\r\n      questionNum: 0, //which question number you are currently on\r\n      questions: Quiz.data, //data used for displaying the quiz\r\n      score: 0, //users score\r\n      resultMessage: \"\" //end result message\r\n    };\r\n  }\r\n\r\n  //HTML Elements to be displayed for the Questions Page\r\n  questionPage() {\r\n    //calls the renderButtons function with the current\r\n    //question and answers list and returns on the\r\n    //HTML Elements\r\n    return this.renderButtons(\r\n      //retrives the questions data from the state questions and points to\r\n      //the questionNumber in the array\r\n      this.state.questions[this.state.questionNum].question,\r\n      this.state.questions[this.state.questionNum].answers\r\n    );\r\n  }\r\n\r\n  //HTML Elements to be displayed for the result page\r\n  resultPage() {\r\n    //returns the end results message\r\n    return <h1 id=\"results\">{this.state.resultMessage}</h1>;\r\n  }\r\n\r\n  //Changes the color of the auestion tab when a user\r\n  //clicks on it\r\n  updateTab(tab) {\r\n    this.setState({ buttonActive: tab });\r\n  }\r\n\r\n  //function handles button submissions\r\n  submit() {\r\n    //intialises variables\r\n    let newScore = this.state.score;\r\n    let questionNumber = this.state.questionNum;\r\n    let nextButton = this.state.button;\r\n\r\n    //checks if button is clicked\r\n    //if the buttons not clicked user is\r\n    //prompted a message sating please select\r\n    //an answer\r\n    if (\r\n      this.state.buttonActive == \"\" &&\r\n      (this.state.page == \"Question\" || this.state.page == \"Finish\")\r\n    ) {\r\n      alert(\"Please Select an Answer\");\r\n    }\r\n    //if the button is clicked then a check is\r\n    //made to see if it was the next button\r\n    //that was clicked\r\n\r\n    //if that is the case a check is made to see\r\n    //if the users selected value is the correct one\r\n    //if so 1 is addedto the users score\r\n    else if (this.state.button == \"Next\") {\r\n      if (\r\n        this.state.buttonActive ==\r\n        this.state.questions[this.state.questionNum].correctAnswer\r\n      ) {\r\n        newScore = this.state.score + 1;\r\n      }\r\n      //if the user is on the last question\r\n      //the button is changed to finish\r\n      if (this.state.questionNum + 1 == this.state.questions.length - 1) {\r\n        nextButton = \"Finish\";\r\n        //question number is plus oned to get the\r\n        //next set of questions and answers\r\n        questionNumber++;\r\n      } else {\r\n        //question number is plus oned to get the\r\n        //next set of questions and answers\r\n        questionNumber++;\r\n      }\r\n      //chnages the state values accordingly\r\n      this.setState({\r\n        score: newScore,\r\n        button: nextButton,\r\n        questionNum: questionNumber,\r\n        buttonActive: \"\"\r\n      });\r\n      //if the button clicked was finish\r\n      //a check is made to see if the users\r\n      //answer was correct and then\r\n      //sets the end message to tell\r\n      //the user their score\r\n    } else if (this.state.button == \"Finish\") {\r\n      if (\r\n        this.state.buttonActive ==\r\n        this.state.questions[this.state.questionNum].correctAnswer\r\n      ) {\r\n        newScore = this.state.score + 1;\r\n      }\r\n      //message created bassed of user score\r\n      let message =\r\n        \"You Scored \" +\r\n        newScore.toString() +\r\n        \" out of \" +\r\n        this.state.questions.length.toString();\r\n      //states updated accordingly\r\n      this.setState({\r\n        score: newScore,\r\n        page: \"Results\",\r\n        button: \"Retry\",\r\n        questionNum: 0,\r\n        buttonActive: \"\",\r\n        resultMessage: message\r\n      });\r\n      //else if none of the other buttons match\r\n      //this means the user wantes to resest the\r\n      //quiz and will revert back to the\r\n      //original state\r\n    } else {\r\n      this.setState({\r\n        score: 0,\r\n        button: \"Next\",\r\n        questionNum: 0,\r\n        page: \"Question\"\r\n      });\r\n    }\r\n  }\r\n\r\n  renderButtons(question, answers) {\r\n    let buttons = [];\r\n    //a question button is generated\r\n    //dynamically based upon the amount of\r\n    //answers a question has\r\n    for (let i = 0; i < answers.length; i++) {\r\n      //pushs each question button into an array\r\n      buttons.push(\r\n        <button\r\n          key={i}\r\n          className=\"questionButton\"\r\n          id={this.state.buttonActive === answers[i] ? \"navButtonActive\" : null}\r\n          onClick={() => this.updateTab(answers[i])}\r\n        >\r\n          {answers[i]}\r\n        </button>\r\n      );\r\n    }\r\n\r\n    //div is made which will contain the question\r\n    //and possible answers\r\n    let output = (\r\n      <div className=\"questionBox\">\r\n        <h1 className=\"question\">{question}</h1>\r\n        <div id=\"buttons\">{buttons}</div>\r\n      </div>\r\n    );\r\n\r\n    return output;\r\n  }\r\n\r\n  //render function will display all the HTML\r\n  //Elements based of the page the user is on\r\n  //The function calls will run the respected\r\n  //functions and return the HTML Elements and\r\n  //display it\r\n  render() {\r\n    return (\r\n      <div id=\"mainPage\">\r\n        <div id=\"mainPageBody\">\r\n          <div id=\"contentPanel\">\r\n            <h2 id=\"quizTitle\">Quiz</h2>\r\n            {this.state.page === \"Question\"\r\n              ? this.questionPage()\r\n              : this.state.page === \"Results\"\r\n              ? this.resultPage()\r\n              : this.state.page}\r\n            {this.state.button == \"Next\" ? (\r\n              <button id=\"submit\" onClick={() => this.submit()}>\r\n                {this.state.button}\r\n              </button>\r\n            ) : this.state.button == \"Finish\" ? (\r\n              <button id=\"submit\" onClick={() => this.submit()}>\r\n                {this.state.button}\r\n              </button>\r\n            ) : (\r\n              <button id=\"submit\" onClick={() => this.submit()}>\r\n                {this.state.button}\r\n              </button>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QuizPage;\r\n"]},"metadata":{},"sourceType":"module"}